name: "latefusion_fullfeatures"

layers {
  name: "data"
  type: SELECT_SEG_BINARY_TWO_FRAMES
  top: "data"
  top: "data2"
  top: "seg-label"
  top: "cls-label"
  image_data_param {
    root_folder: "./dataset"
    source: "./dataset/train.txt"
    label_type: PIXEL
    batch_size: 4
    shuffle: true
    new_width: 350
    new_height: 350
  }
  transform_param {
    mean_value: 104.008
    mean_value: 116.669
    mean_value: 122.675
    crop_size: 320
    mirror: true
  }
  window_cls_data_param {
    label_dim: 20
  }
  include: { phase: TRAIN }
}

layers {
  name: "data"
  type: SELECT_SEG_BINARY_TWO_FRAMES
  top: "data"
  top: "data2"
  top: "seg-label"
  top: "cls-label"
  image_data_param {
    root_folder: "./dataset"
    source: "./dataset/val.txt"
    label_type: PIXEL
    batch_size: 2
    shuffle: true
    new_width: 350
    new_height: 350
  }
  transform_param {
    mean_value: 104.008
    mean_value: 116.669
    mean_value: 122.675
    crop_size: 320
    mirror: true
  }
  window_cls_data_param {
    label_dim: 20
  }
  include: { phase: TEST }
}

###############################################################################
##### Conv1 ###################################################################
###############################################################################

# 224 x 224
# conv1_1
layers {  bottom: "data"  top: "conv1_1"  name: "conv1_1"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv1_1p1" param: "conv1_1p2"
  convolution_param {    num_output: 64    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv1_1"  top: "conv1_1"  name: "relu1_1"  type: RELU}
# conv1_2
layers {  bottom: "conv1_1"  top: "conv1_2"  name: "conv1_2"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv1_2p1" param: "conv1_2p2"
  convolution_param {    num_output: 64    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv1_2"  top: "conv1_2"  name: "relu1_2"  type: RELU}

# pool1
layers {
  bottom: "conv1_2"  top: "pool1" top: "pool1_mask" name: "pool1"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 112 x 112
# conv2_1
layers {  bottom: "pool1"  top: "conv2_1"  name: "conv2_1"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv2_1p1" param: "conv2_1p2"
  convolution_param {    num_output: 128    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv2_1"  top: "conv2_1"  name: "relu2_1"  type: RELU}
# conv2_2
layers {  bottom: "conv2_1"  top: "conv2_2"  name: "conv2_2"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv2_2p1" param: "conv2_2p2"
  convolution_param {    num_output: 128    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv2_2"  top: "conv2_2"  name: "relu2_2"  type: RELU}

# pool2
layers {
  bottom: "conv2_2"  top: "pool2" top: "pool2_mask" name: "pool2"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 56 x 56
# conv3_1
layers {  bottom: "pool2"  top: "conv3_1"  name: "conv3_1"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv3_1p1" param: "conv3_1p2"
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv3_1"  top: "conv3_1"  name: "relu3_1"  type: RELU}
# conv3_2
layers {  bottom: "conv3_1"  top: "conv3_2"  name: "conv3_2"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv3_2p1" param: "conv3_2p2"
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv3_2"  top: "conv3_2"  name: "relu3_2"  type: RELU}
# conv3_3
layers {  bottom: "conv3_2"  top: "conv3_3"  name: "conv3_3"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv3_3p1" param: "conv3_3p2"
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv3_3"  top: "conv3_3"  name: "relu3_3"  type: RELU}

# pool3
layers {
  bottom: "conv3_3"  top: "pool3" top: "pool3_mask" name: "pool3"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 28 x 28
# conv4_1
layers {  bottom: "pool3"  top: "conv4_1"  name: "conv4_1"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv4_1p1" param: "conv4_1p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv4_1"  top: "conv4_1"  name: "relu4_1"  type: RELU}
# conv4_2
layers {  bottom: "conv4_1"  top: "conv4_2"  name: "conv4_2"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv4_2p1" param: "conv4_2p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv4_2"  top: "conv4_2"  name: "relu4_2"  type: RELU}
# conv4_3
layers {  bottom: "conv4_2"  top: "conv4_3"  name: "conv4_3"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv4_3p1" param: "conv4_3p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv4_3"  top: "conv4_3"  name: "relu4_3"  type: RELU}

# pool4
layers {
  bottom: "conv4_3"  top: "pool4" top: "pool4_mask" name: "pool4"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 14 x 14
# conv5_1
layers {  bottom: "pool4"  top: "conv5_1"  name: "conv5_1"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv5_1p1" param: "conv5_1p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv5_1"  top: "conv5_1"  name: "relu5_1"  type: RELU}
# conv5_2
layers {  bottom: "conv5_1"  top: "conv5_2"  name: "conv5_2"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv5_2p1" param: "conv5_2p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv5_2"  top: "conv5_2"  name: "relu5_2"  type: RELU}
# conv5_3
layers {  bottom: "conv5_2"  top: "conv5_3"  name: "conv5_3"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv5_3p1" param: "conv5_3p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv5_3"  top: "conv5_3"  name: "relu5_3"  type: RELU}

# pool5
layers {
  bottom: "conv5_3"  top: "pool5" top: "pool5_mask" name: "pool5"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}



###############################################################################
##### Conv2 ###################################################################
###############################################################################

# 224 x 224
# conv1_1
layers {  bottom: "data2"  top: "conv1_1b"  name: "conv1_1b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv1_1p1" param: "conv1_1p2"
  convolution_param {    num_output: 64    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv1_1b"  top: "conv1_1b"  name: "relu1_1b"  type: RELU}
# conv1_2
layers {  bottom: "conv1_1b"  top: "conv1_2b"  name: "conv1_2b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv1_2p1" param: "conv1_2p2"
  convolution_param {    num_output: 64    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv1_2b"  top: "conv1_2b"  name: "relu1_2b"  type: RELU}

# pool1
layers {
  bottom: "conv1_2b"  top: "pool1b" name: "pool1b"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 112 x 112
# conv2_1
layers {  bottom: "pool1b"  top: "conv2_1b"  name: "conv2_1b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv2_1p1" param: "conv2_1p2"
  convolution_param {    num_output: 128    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv2_1b"  top: "conv2_1b"  name: "relu2_1b"  type: RELU}
# conv2_2
layers {  bottom: "conv2_1b"  top: "conv2_2b"  name: "conv2_2b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv2_2p1" param: "conv2_2p2"
  convolution_param {    num_output: 128    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv2_2b"  top: "conv2_2b"  name: "relu2_2b"  type: RELU}

# pool2
layers {
  bottom: "conv2_2b"  top: "pool2b" name: "pool2b"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 56 x 56
# conv3_1
layers {  bottom: "pool2b"  top: "conv3_1b"  name: "conv3_1b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv3_1p1" param: "conv3_1p2"
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv3_1b"  top: "conv3_1b"  name: "relu3_1b"  type: RELU}
# conv3_2
layers {  bottom: "conv3_1b"  top: "conv3_2b"  name: "conv3_2b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv3_2p1" param: "conv3_2p2"
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv3_2b"  top: "conv3_2b"  name: "relu3_2b"  type: RELU}
# conv3_3
layers {  bottom: "conv3_2b"  top: "conv3_3b"  name: "conv3_3b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv3_3p1" param: "conv3_3p2"
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv3_3b"  top: "conv3_3b"  name: "relu3_3b"  type: RELU}

# pool3
layers {
  bottom: "conv3_3b"  top: "pool3b" name: "pool3b"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 28 x 28
# conv4_1
layers {  bottom: "pool3b"  top: "conv4_1b"  name: "conv4_1b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv4_1p1" param: "conv4_1p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv4_1b"  top: "conv4_1b"  name: "relu4_1b"  type: RELU}
# conv4_2
layers {  bottom: "conv4_1b"  top: "conv4_2b"  name: "conv4_2b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv4_2p1" param: "conv4_2p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv4_2b"  top: "conv4_2b"  name: "relu4_2b"  type: RELU}
# conv4_3
layers {  bottom: "conv4_2b"  top: "conv4_3b"  name: "conv4_3b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv4_3p1" param: "conv4_3p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv4_3b"  top: "conv4_3b"  name: "relu4_3b"  type: RELU}

# pool4
layers {
  bottom: "conv4_3b"  top: "pool4b" name: "pool4b"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 14 x 14
# conv5_1
layers {  bottom: "pool4b"  top: "conv5_1b"  name: "conv5_1b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv5_1p1" param: "conv5_1p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv5_1b"  top: "conv5_1b"  name: "relu5_1b"  type: RELU}
# conv5_2
layers {  bottom: "conv5_1b"  top: "conv5_2b"  name: "conv5_2b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv5_2p1" param: "conv5_2p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv5_2b"  top: "conv5_2b"  name: "relu5_2b"  type: RELU}
# conv5_3
layers {  bottom: "conv5_2b"  top: "conv5_3b"  name: "conv5_3b"  type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: "conv5_3p1" param: "conv5_3p2"
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layers {  bottom: "conv5_3b"  top: "conv5_3b"  name: "relu5_3b"  type: RELU}

# pool5
layers {
  bottom: "conv5_3b"  top: "pool5b" name: "pool5b"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}



###############################################################################
##### Classification ##########################################################
###############################################################################
# for first convolution stream

# 7 x 7
# fc6
layers { bottom: 'pool5' top: 'fc6' name: 'fc6' type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'fc6p1' param: 'fc6p2'
  convolution_param { kernel_size: 7 num_output: 4096 } }
layers {  bottom: "fc6"  top: "fc6" top: "relu6-mask"  name: "relu6"  type: RELU}

# 1 x 1
# fc7
layers { bottom: 'fc6' top: 'fc7' name: 'fc7' type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'fc7p1' param: 'fc7p2'
  convolution_param { kernel_size: 1 num_output: 4096 } }
layers {  bottom: "fc7"  top: "fc7" top: "relu7-mask"  name: "relu7"  type: RELU}            

# cls-score-voc
layers { name: 'cls-score-voc' type: CONVOLUTION bottom: 'fc7' top: 'cls-score'
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'cls-score-p1' param: 'cls-score-p2'
  convolution_param { num_output: 20 kernel_size: 1
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }

# average pooling
layers {
  bottom: "cls-score"  top: "cls-score-pooled" top: "score-pool-mask" name: "avg-pool"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 4    stride: 1  }
}
layers { bottom: 'cls-score-pooled' top: 'cls-score-sigmoid' name: 'cls-score-sigmoid' type: SIGMOID}

# mask score using class label
layers { bottom: 'cls-score-sigmoid' bottom: 'cls-label' top: 'cls-score-masked' name: 'cls-score-mask' type: ELTWISE
  eltwise_param { operation: PROD }}

# average unpooling
layers {
  bottom: "cls-score-masked" bottom: "score-pool-mask"  top: "cls-score-unpooled" 
  name: "avg-unpool"  type: UNPOOLING
  unpooling_param {    unpool: MAX    kernel_size: 4    stride: 1 unpool_size: 4  }
}

# 1 x 1
# cls-score-voc-bp
layers { name: 'cls-score-voc-bp' type: CONVOLUTION bottom: 'cls-score-unpooled' top: 'fc7-bp'
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'cls-score-bp-p1' param: 'cls-score-bp-p2'
  convolution_param { num_output: 4096 kernel_size: 1
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }


# fc7-bp
layers { bottom: 'fc7-bp' bottom: 'relu7-mask' top: 'fc7-bp' name: 'relu7-mask' type: ELTWISE
  eltwise_param { operation: PROD }}
layers { bottom: 'fc7-bp' top: 'fc6-bp' name: 'fc7-bp' type: DECONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'fc7-bp-p1' param: 'fc7-bp-p2'
  convolution_param { kernel_size: 1 num_output: 4096 } }

# fc6-bp
layers { bottom: 'fc6-bp' bottom: 'relu6-mask' top: 'fc6-bp' name: 'relu6-mask' type: ELTWISE
  eltwise_param { operation: PROD }}
layers { bottom: 'fc6-bp' top: 'pool5-bp' name: 'fc6-bp' type: DECONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'fc6-bp-p1' param: 'fc6-bp-p2'
  convolution_param { kernel_size: 7 num_output: 512 } }

# for second convolution stream

# 7 x 7
# fc6
layers { bottom: 'pool5b' top: 'fc6b' name: 'fc6b' type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'fc6p1' param: 'fc6p2'
  convolution_param { kernel_size: 7 num_output: 4096 } }
layers {  bottom: "fc6b"  top: "fc6b" top: "relu6b-mask"  name: "relu6b"  type: RELU}

# 1 x 1
# fc7
layers { bottom: 'fc6b' top: 'fc7b' name: 'fc7b' type: CONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'fc7p1' param: 'fc7p2'
  convolution_param { kernel_size: 1 num_output: 4096 } }
layers {  bottom: "fc7b"  top: "fc7b" top: "relu7b-mask"  name: "relu7b"  type: RELU}            

# cls-score-voc
layers { name: 'cls-score-vocb' type: CONVOLUTION bottom: 'fc7b' top: 'cls-scoreb'
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'cls-score-p1' param: 'cls-score-p2'
  convolution_param { num_output: 20 kernel_size: 1
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }

# average pooling
layers {
  bottom: "cls-scoreb"  top: "cls-scoreb-pooled" top: "score-poolb-mask" name: "avg-poolb"  type: POOLING
  pooling_param {    pool: MAX    kernel_size: 4    stride: 1  }
}
layers { bottom: 'cls-scoreb-pooled' top: 'cls-scoreb-sigmoid' name: 'cls-scoreb-sigmoid' type: SIGMOID}

# mask score using class label
layers { bottom: 'cls-scoreb-sigmoid' bottom: 'cls-label' top: 'cls-scoreb-masked' name: 'cls-scoreb-mask' type: ELTWISE
  eltwise_param { operation: PROD }}

# average unpooling
layers {
  bottom: "cls-scoreb-masked" bottom: "score-poolb-mask"  top: "cls-scoreb-unpooled" 
  name: "avg-unpoolb"  type: UNPOOLING
  unpooling_param {    unpool: MAX    kernel_size: 4    stride: 1 unpool_size: 4  }
}

# 1 x 1
# cls-score-voc-bp
layers { name: 'cls-score-vocb-bp' type: CONVOLUTION bottom: 'cls-scoreb-unpooled' top: 'fc7b-bp'
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'cls-score-bp-p1' param: 'cls-score-bp-p2'
  convolution_param { num_output: 4096 kernel_size: 1
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }


# fc7-bp
layers { bottom: 'fc7b-bp' bottom: 'relu7b-mask' top: 'fc7b-bp' name: 'relu7b-mask' type: ELTWISE
  eltwise_param { operation: PROD }}
layers { bottom: 'fc7b-bp' top: 'fc6b-bp' name: 'fc7b-bp' type: DECONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'fc7-bp-p1' param: 'fc7-bp-p2'
  convolution_param { kernel_size: 1 num_output: 4096 } }

# fc6-bp
layers { bottom: 'fc6b-bp' bottom: 'relu6b-mask' top: 'fc6b-bp' name: 'relu6b-mask' type: ELTWISE
  eltwise_param { operation: PROD }}
layers { bottom: 'fc6b-bp' top: 'pool5b-bp' name: 'fc6b-bp' type: DECONVOLUTION
  blobs_lr: 0 blobs_lr: 0 weight_decay: 1 weight_decay: 0 param: 'fc6-bp-p1' param: 'fc6-bp-p2'
  convolution_param { kernel_size: 7 num_output: 512 } }


###############################################################################
##### Bridging layers #########################################################
###############################################################################


### apply bn to pool5 feature
layers { bottom: 'pool5' top: 'pool5-bn' name: 'pool5-bn' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }

### apply bn to pool5 feature
layers { bottom: 'pool5b' top: 'pool5b-bn' name: 'pool5b-bn' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }

### apply bn to pool5-bp feature
layers { bottom: 'pool5-bp' top: 'pool5-bp-bn' name: 'pool5-bp-bn' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }

### apply bn to pool5-bp feature
layers { bottom: 'pool5b-bp' top: 'pool5b-bp-bn' name: 'pool5b-bp-bn' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }

### concatenate pool5, pool5b and pool5-bp feature (after bn)
layers { bottom: 'pool5-bn' bottom: 'pool5b-bn' bottom: 'pool5-bp-bn' bottom: 'pool5b-bp-bn' top: 'pool5-concat'
         name: 'pool5-concat' type: CONCAT }

### learning how to mix features
# 7 x 7
# fc6-seg
layers { bottom: 'pool5-concat' top: 'fc6-seg' name: 'fc6-seg' type: CONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { kernel_size: 7 num_output: 2048
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'fc6-seg' top: 'fc6-seg' name: 'bnfc6-seg' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers {  bottom: "fc6-seg"  top: "fc6-seg"  name: "relu6-seg"  type: RELU}

# 1 x 1
# fc7-seg
layers { bottom: 'fc6-seg' top: 'fc7-seg' name: 'fc7-seg' type: CONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { kernel_size: 1 num_output: 2048
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    } } }
layers { bottom: 'fc7-seg' top: 'fc7-seg' name: 'bnfc7-seg' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers {  bottom: "fc7-seg"  top: "fc7-seg"  name: "relu7-seg"  type: RELU}


###############################################################################
##### Deconvolution ###########################################################
###############################################################################


# fc6-deconv
layers { bottom: 'fc7-seg' top: 'fc6-deconv' name: 'fc6-deconv' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 512 kernel_size: 7
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'fc6-deconv' top: 'fc6-deconv' name: 'fc6-deconv-bn' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'fc6-deconv' top: 'fc6-deconv' name: 'fc6-deconv-relu' type: RELU }

# 7 x 7
# unpool5
layers { type: UNPOOLING  bottom: "fc6-deconv"  bottom: "pool5_mask"  top: "unpool5"  name: "unpool5"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 20 }
}

# 14 x 14
# deconv5_1
layers { bottom: 'unpool5' top: 'deconv5_1' name: 'deconv5_1' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 512   pad: 1  kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv5_1' top: 'deconv5_1' name: 'debn5_1' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv5_1' top: 'deconv5_1' name: 'derelu5_1' type: RELU }
# deconv5_2
layers { bottom: 'deconv5_1' top: 'deconv5_2' name: 'deconv5_2' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 512   pad: 1  kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv5_2' top: 'deconv5_2' name: 'debn5_2' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv5_2' top: 'deconv5_2' name: 'derelu5_2' type: RELU }
# deconv5_3
layers { bottom: 'deconv5_2' top: 'deconv5_3' name: 'deconv5_3' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 512   pad: 1  kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv5_3' top: 'deconv5_3' name: 'debn5_3' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv5_3' top: 'deconv5_3' name: 'derelu5_3' type: RELU }

# unpool4
layers { type: UNPOOLING  bottom: "deconv5_3"  bottom: "pool4_mask"  top: "unpool4"  name: "unpool4"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 40 }
}

# 28 x 28
# deconv4_1
layers { bottom: 'unpool4' top: 'deconv4_1' name: 'deconv4_1' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 512   pad: 1  kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv4_1' top: 'deconv4_1' name: 'debn4_1' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv4_1' top: 'deconv4_1' name: 'derelu4_1' type: RELU }
# deconv 4_2
layers { bottom: 'deconv4_1' top: 'deconv4_2' name: 'deconv4_2' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 512   pad: 1  kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv4_2' top: 'deconv4_2' name: 'debn4_2' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv4_2' top: 'deconv4_2' name: 'derelu4_2' type: RELU }
# deconv 4_3
layers { bottom: 'deconv4_2' top: 'deconv4_3' name: 'deconv4_3' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 256   pad: 1  kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv4_3' top: 'deconv4_3' name: 'debn4_3' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv4_3' top: 'deconv4_3' name: 'derelu4_3' type: RELU }

# unpool3
layers { type: UNPOOLING  bottom: "deconv4_3"  bottom: "pool3_mask"  top: "unpool3"  name: "unpool3"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 80 }
}

# 56 x 56
# deconv3_1
layers { bottom: 'unpool3' top: 'deconv3_1' name: 'deconv3_1' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output:256    pad:1   kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv3_1' top: 'deconv3_1' name: 'debn3_1' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv3_1' top: 'deconv3_1' name: 'derelu3_1' type: RELU }
# deconv3_2
layers { bottom: 'deconv3_1' top: 'deconv3_2' name: 'deconv3_2' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output:256    pad:1   kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv3_2' top: 'deconv3_2' name: 'debn3_2' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv3_2' top: 'deconv3_2' name: 'derelu3_2' type: RELU }
# deconv3_3
layers { bottom: 'deconv3_2' top: 'deconv3_3' name: 'deconv3_3' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output:128    pad:1   kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv3_3' top: 'deconv3_3' name: 'debn3_3' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv3_3' top: 'deconv3_3' name: 'derelu3_3' type: RELU }

# unpool2
layers { type: UNPOOLING  bottom: "deconv3_3"  bottom: "pool2_mask"  top: "unpool2"  name: "unpool2"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 160 }
}

# 112 x 112
# deconv2_1
layers { bottom: 'unpool2' top: 'deconv2_1' name: 'deconv2_1' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output:128    pad:1   kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv2_1' top: 'deconv2_1' name: 'debn2_1' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv2_1' top: 'deconv2_1' name: 'derelu2_1' type: RELU }
# deconv2_2
layers { bottom: 'deconv2_1' top: 'deconv2_2' name: 'deconv2_2' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output:64     pad:1   kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv2_2' top: 'deconv2_2' name: 'debn2_2' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv2_2' top: 'deconv2_2' name: 'derelu2_2' type: RELU }

# unpool1
layers { type: UNPOOLING  bottom: "deconv2_2"  bottom: "pool1_mask"  top: "unpool1"  name: "unpool1"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 320 }
}
# deconv1_1
layers { bottom: 'unpool1' top: 'deconv1_1' name: 'deconv1_1' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output:64     pad:1   kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv1_1' top: 'deconv1_1' name: 'debn1_1' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv1_1' top: 'deconv1_1' name: 'derelu1_1' type: RELU }

# deconv1_2
layers { bottom: 'deconv1_1' top: 'deconv1_2' name: 'deconv1_2' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output:64     pad:1   kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layers { bottom: 'deconv1_2' top: 'deconv1_2' name: 'debn1_2' type: BN
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } } }
layers { bottom: 'deconv1_2' top: 'deconv1_2' name: 'derelu1_2' type: RELU }

# seg-score
layers { name: 'seg-score-voc' type: CONVOLUTION bottom: 'deconv1_2' top: 'seg-score'
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 2 kernel_size: 1
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }

# score and accuracy
layers {
  name: "seg-accuracy"
  type: ELTWISE_ACCURACY
  bottom: "seg-score"
  bottom: "seg-label"
  top: "seg-accuracy"
  eltwise_accuracy_param {
    ignore_label: 255
  }
  include: { phase: TEST }
}

layers {
  name: "seg-loss"
  type: SOFTMAX_LOSS
  bottom: "seg-score"
  bottom: "seg-label"
  top: "seg-loss"
  loss_param {
    ignore_label: 255
  }
}










